@page "/game"

@inject IJSRuntime JS

<h3>Game</h3>
@if( GameField != null )
{
    if( congrat )
    {
                    <h4>Поздравляем! Вы выиграли</h4>
    }
    <table id="game_field">
        <tbody>
            @for( int i = 0; i < GameField.Field.Length; i++ )
            {
                <tr>
                    @for( int j = 0; j < GameField.Field[i].Length; j++ )
                    {
                        var point = (i, j);
                        var id = $"cell_{i}_{j}";
                        <td>

                            <button id="@id" style="width:100%; height:100%" @onclick="() => ShowTd( point.i, point.j )"></button>
                        </td>
                    }
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <h4>Loading...</h4>
}

@code {
    private byte ClickCount { get; set; }
    private Coord FirstCard { get; set; }
    private Coord SecondCard { get; set; }

    private bool congrat = false;


    protected async Task ShowTd( int x, int y )
    {
        var temp = new Coord { X = x, Y = y };
        if( GameField.Field[temp.X][temp.Y].IsOpen ) return;
        if( ClickCount == 2 )
        {
            await JS.InvokeVoidAsync( "showSelectCell", new object[] { FirstCard.GetCellPos(), GameField.Field[x][y].Value, "white", true } );
            await JS.InvokeVoidAsync( "showSelectCell", new object[] { SecondCard.GetCellPos(), GameField.Field[x][y].Value, "white", true } );
            GameField.Field[FirstCard.X][FirstCard.Y].IsOpen = false;
            GameField.Field[SecondCard.X][SecondCard.Y].IsOpen = false;
            ClickCount = 0;
        }
        if( ClickCount == 0  )
        {
            FirstCard = temp;
            ClickCount++;
            await JS.InvokeVoidAsync( "showSelectCell", new object[] { FirstCard.GetCellPos(), GameField.Field[x][y].Value, "yellow", false } );
            GameField.Field[FirstCard.X][FirstCard.Y].IsOpen = true;
        }
        else if( ClickCount == 1 )
        {
            SecondCard = temp;
            Console.WriteLine( GameField.Field[FirstCard.X][FirstCard.Y].Value );
            Console.WriteLine( GameField.Field[SecondCard.X][SecondCard.Y].Value );
            await JS.InvokeVoidAsync( "showSelectCell", new object[] { SecondCard.GetCellPos(), GameField.Field[x][y].Value, "yellow", false, true } );
            if( GameField.Field[FirstCard.X][FirstCard.Y].Value == GameField.Field[SecondCard.X][SecondCard.Y].Value )
            {
                await JS.InvokeVoidAsync( "showSelectCell", new object[] { FirstCard.GetCellPos(), GameField.Field[x][y].Value, "green", false } );
                await JS.InvokeVoidAsync( "showSelectCell", new object[] { SecondCard.GetCellPos(), GameField.Field[x][y].Value, "green", false } );
                GameField.Field[FirstCard.X][FirstCard.Y].IsOpen = true;
                GameField.Field[SecondCard.X][SecondCard.Y].IsOpen = true;
                if( GameField.IsWin() )
                {
                    congrat = true;
                }
                ClickCount = 0;
            }
            else
            {
                ClickCount++;
            }
        }
    }

    protected void Delayy()
    {
        Thread.Sleep( 1500 );
    }

    protected override Task OnInitializedAsync()
    {
        Init();
        return base.OnInitializedAsync();
    }
}
