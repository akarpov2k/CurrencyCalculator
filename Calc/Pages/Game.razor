@page "/game"

@inject IJSRuntime JS

<h3>Game</h3>
@if( GameField != null )
{
<span>Времени осталось: @TimeLeft.ToString( "hh\\:mm\\:ss" )</span>
    <table id="game_field">
        <tbody>
            @for( int i = 0; i < GameField.Field.Length; i++ )
            {
                <tr>
                    @for( int j = 0; j < GameField.Field[i].Length; j++ )
                    {
                        var point = (i, j);
                        var id = $"cell_{i}_{j}";
                        <td>

                            <button id="@id" style="width:100%; height:100%" @onclick="() => ShowTd( point.i, point.j )"></button>
                        </td>
                    }
                </tr>
            }
        </tbody>
    </table>
}
else
{
    if( GameEnd )
    {
        <h4>@EndText</h4>        
        if( isWin )
        {
        <div>
            <span>Вы завершили игру за @GameMoveCount ходов и затратили @winTime</span>
        </div>
        }
    }
    <div style="display: @displaySettings">
        <h4>Выберите размер поля</h4>
        <input type="number" step="4" min="4" max="256" onkeypress="return false;" @bind="fieldSize" />
    </div>
    <button @onclick="() => Init(fieldSize)">@ButtonText</button>
}

@code {
    
    private string ButtonText { get; set; } = "Начать игру!";
    private string displaySettings { get; set; } = "block";
    private byte fieldSize = 4;
    private string winTime;
    private bool isWin = false;


    protected async Task ShowTd( int x, int y )
    {
        TunrTimer.Enabled = false;
        var temp = new Coord { X = x, Y = y };
        if( GameField.Field[temp.X][temp.Y].IsOpen ) return;
        if( ClickCount == 2 )
        {
            HideCards();
            EraseCards();
        }
        if( ClickCount == 0 )
        {
            ClickCount++;
            FirstCard = temp;
            await JS.InvokeVoidAsync( "showSelectCell", new object[] { FirstCard.GetCellPos(), GameField.Field[x][y].Value, SelectColor, false } );
            GameField.Field[FirstCard.X][FirstCard.Y].IsOpen = true;
            GameMoveCount++;
        }
        else if( ClickCount == 1 )
        {
            ClickCount++;
            SecondCard = temp;
            await JS.InvokeVoidAsync( "showSelectCell", new object[] { SecondCard.GetCellPos(), GameField.Field[x][y].Value, SelectColor, false, true } );
            if( GameField.Field[FirstCard.X][FirstCard.Y].Value == GameField.Field[SecondCard.X][SecondCard.Y].Value )
            {
                await JS.InvokeVoidAsync( "showSelectCell", new object[] { FirstCard.GetCellPos(), GameField.Field[x][y].Value, WinColor, false } );
                await JS.InvokeVoidAsync( "showSelectCell", new object[] { SecondCard.GetCellPos(), GameField.Field[x][y].Value, WinColor, false } );
                GameField.Field[FirstCard.X][FirstCard.Y].IsOpen = true;
                GameField.Field[SecondCard.X][SecondCard.Y].IsOpen = true;
                EraseCards();
                if( GameField.IsWin() )
                {
                    GameWatch.Stop();
                    GameEnd = true;
                    ButtonText = "Начать заново";
                    displaySettings = "none";
                    GameField = null;
                    winTime = GameWatch.Elapsed.ToString( "hh\\:mm\\:ss\\.ff" );
                    EndText = "Поздравляю. Вы выиграли!";
                    isWin = true;
                    return;
                }
            }
            else
            {
                GameMoveCount++;
                TunrTimer.Enabled = true;
            }
        }
    }
}
